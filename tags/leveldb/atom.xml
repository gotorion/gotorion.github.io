<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>活出生命的辽阔 - leveldb</title>
    <subtitle>Just a blog site</subtitle>
    <link rel="self" type="application/atom+xml" href="https://gotorion.fun/tags/leveldb/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://gotorion.fun"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-02-20T00:00:00+00:00</updated>
    <id>https://gotorion.fun/tags/leveldb/atom.xml</id>
    <entry xml:lang="zh">
        <title>LevelDB 源码剖析之符号导出</title>
        <published>2025-02-20T00:00:00+00:00</published>
        <updated>2025-02-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://gotorion.fun/blog/leveldb-export-zh/"/>
        <id>https://gotorion.fun/blog/leveldb-export-zh/</id>
        
        <content type="html" xml:base="https://gotorion.fun/blog/leveldb-export-zh/">&lt;h1 id=&quot;background&quot;&gt;Background&lt;&#x2F;h1&gt;
&lt;p&gt;在开发公司项目使用FastDDS的时候看到如下代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#ffffff;color:#323232;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#if defined&lt;&#x2F;span&gt;&lt;span&gt;(_WIN32)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#if defined&lt;&#x2F;span&gt;&lt;span&gt;(EPROSIMA_ALL_DYN_LINK) || &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;defined&lt;&#x2F;span&gt;&lt;span&gt;(FASTCDR_DYN_LINK)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#if defined&lt;&#x2F;span&gt;&lt;span&gt;(fastcdr_EXPORTS)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;Cdr_DllAPI &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;__declspec&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;dllexport &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;Cdr_DllAPI &lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;__declspec&lt;&#x2F;span&gt;&lt;span&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#0086b3;&quot;&gt;dllimport &lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#endif &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; FASTCDR_SOURCE
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;Cdr_DllAPI
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#endif &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; if defined(EPROSIMA_ALL_DYN_LINK) || defined(FASTCDR_DYN_LINK)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#else
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;Cdr_DllAPI
&lt;&#x2F;span&gt;&lt;span style=&quot;font-weight:bold;color:#a71d5d;&quot;&gt;#endif &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#969896;&quot;&gt;&#x2F;&#x2F; _WIN32
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;不过我入职以来学习的开发方式一直都是提供接口头文件和库文件给使用者，不是很清楚为什么需要单独导出符号。今天阅读leveldb源码的时候看到&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;leveldb&#x2F;blob&#x2F;main&#x2F;include&#x2F;leveldb&#x2F;export.h&quot;&gt;export.h&lt;&#x2F;a&gt;中类似snippets如下，特此研究。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;qu-bie-sheng-ming-he-fu-hao&quot;&gt;区别声明和符号&lt;&#x2F;h1&gt;
&lt;p&gt;首先需要了解程序编译的过程：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;编译阶段：头文件提供了函数和类的声明，让编译器知道这些符号存在；&lt;&#x2F;li&gt;
&lt;li&gt;链接阶段：链接器需要找到符号的实现；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;对于动态库，只有被显式导出的符号才会被放入符号表，否则链接阶段会出现未定义错误。基于以上可知，声明的符号是在两个阶段作用的，虽然头文件中包含了声明，
依然可以通过设置符号可见性控制调用者的使用。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;kong-zhi-fu-hao-ke-jian-xing-de-you-dian&quot;&gt;控制符号可见性的优点&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;在程序链接的库较多时可以减少冲突并隐藏部分内部方法，类型于开发库的时候加一个&lt;code&gt;details&lt;&#x2F;code&gt;的namespace防止污染。&lt;&#x2F;li&gt;
&lt;li&gt;导出符号过多会导致动态库的导出表增大，从而影响库文件体积和加载速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;linux-win32kong-zhi-fu-hao-ke-jian-xing&quot;&gt;Linux&#x2F;Win32控制符号可见性&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Linux平台通过attribute的&lt;code&gt;visibility&lt;&#x2F;code&gt;控制，可选为&lt;code&gt;hidden&lt;&#x2F;code&gt;和&lt;code&gt;default&lt;&#x2F;code&gt;；&lt;&#x2F;li&gt;
&lt;li&gt;Win32平台使用&lt;code&gt;dllexport&lt;&#x2F;code&gt;和&lt;code&gt;dllimport&lt;&#x2F;code&gt;共同控制符号导出，&lt;code&gt;__declspec(dllexport)&lt;&#x2F;code&gt;标记需要导出的符号，&lt;code&gt;__declspec(dllimport)&lt;&#x2F;code&gt;标记该符号需要从其他dll或exe中导入；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PS：在Windows平台上默认是不导出符号的，需要通过&lt;code&gt;dllexport&lt;&#x2F;code&gt;显式导出；Linux上默认导出所有非静态符号，需要通过&lt;code&gt;__attribute__((visibility(&quot;hidden&quot;)))&lt;&#x2F;code&gt;显式隐藏。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;cha-kan-fu-hao-biao&quot;&gt;查看符号表&lt;&#x2F;h1&gt;
&lt;p&gt;平时开发我一般会使用&lt;code&gt;readelf&lt;&#x2F;code&gt;和&lt;code&gt;nm&lt;&#x2F;code&gt;命令配合&lt;code&gt;grep&lt;&#x2F;code&gt;等命令查找，查找资料才了解到有&lt;code&gt;dlopen&lt;&#x2F;code&gt;等系列系统调用可以解析动态库，不过目前工作中没有使用场景，暂时留个坑。&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
